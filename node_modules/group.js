var Neo4j = require('neo4j'),
	Step = require('step'),
	GROUPS_REFERENCE,
	db;

var Group = function(config){
	db = new Neo4j.GraphDatabase(config.databaseUrl + ':' + config.port);
	console.log('Group Module connected: '+config.databaseUrl+ ':' + config.port);

	db.query("START n = node(0) MATCH (n) <-[:COLLECTIONS_REFERENCE]- () <-[:GROUPS_REFERENCE]- (grp_ref) RETURN grp_ref", function(errors, nodes) {
		if (errors) {
			// TODO: throw errors
			console.log('Unable to locate a valid reference node for groups');
			console.log(errors);
		} else {
			GROUPS_REFERENCE = nodes[0]['grp_ref'];
			// console.log(GROUPS_REFERENCE);
		}
	});

	return {
		create: function(req, res, next){
			var newGroup = JSON.parse(req.body.data);

			var groupData = {
				title: newGroup.title,
				startDate: newGroup.startDate,
				endDate: newGroup.endDate
			}, groupNode, userInviteFollows, groupOwner, groupFollows;

			groupNode = db.createNode(groupData);

			Step(
				function getFollows(){
					if(newGroup.follow.length){
						var group = this.group();
						for (var i=0, j=newGroup.follow.length; i<j; i++) {
							db.getNodeById( newGroup.follow[i].id, group() );
						}
					} else {
						return [];
					}
				},
				function storeFollows(err, results){
					groupFollows = results;
					return 'hey'; // lol?
				},
				function getOwner(){
					console.dir(arguments);
					db.getNodeById( newGroup.userid, this);
				},
				function storeOwner(err, result){
					console.dir(arguments);
					groupOwner = result;
					return 'save group';
				},
				function saveGroup(){
					console.log(groupNode);
					groupNode.save(this);
				},
				function indexGroup(){
					console.dir(arguments);
					groupNode.index('group', 'title', newGroup.title, this.parallel() );
					groupNode.index('fulltext', 'group', newGroup.title, this.parallel() );
				},
				function relateGroup(err){
					console.dir(arguments);
					groupNode.createRelationshipTo(GROUPS_REFERENCE, 'MEMBER_OF', {}, this.parallel() );
					groupOwner.createRelationshipTo( groupNode, 'CREATED', {}, this.parallel() );
				},
				function relateGroupFollows(){
					console.dir(arguments);
					if (groupFollows.length) {
						var group = this.group();
						groupFollows.forEach(function(node){
							groupNode.createRelationshipTo(node, 'FOLLOWS', {}, group() );
						});
					}
				},
				function sendInviteFollows(){
					console.dir(arguments);
					var invite = groupOwner._data.data.first + ' has invited you to follow ' +
						groupData.title;
					if(userInviteJoins.length) {
						var group = this.group();
						userInviteJoins.forEach(function(user){
							groupNode.createRelationshipTo(user, 'INVITE', { type: 'FOLLOWS', inviteText: invite }, group() );
						});
					}
				},
				function sendResults(err){
					res.json({ fuckYou: "i never liked you" });
					console.log('//////////////');
					console.log(groupNode);
				}
			);
		}
	};

};

module.exports = Group;