var Neo4j = require('neo4j'),
	Step = require('step'),
	ADVENTURES_REFERENCE,
	db;

var Adventure = function(config){
	db = new Neo4j.GraphDatabase(config.databaseUrl + ':' + config.port);

	db.query("START n = node(0) MATCH (n) <-[:COLLECTIONS_REFERENCE]- () <-[:ADVENTURES_REFERENCE]- (adv_ref) RETURN adv_ref", function(errors, nodes) {
		if (errors) {
			// TODO: throw errors
		} else {
			ADVENTURES_REFERENCE = nodes[0]['adv_ref'];
		}
	});

	return {
		create: function(req, res, next){
			var newAdventure = JSON.parse(req.body.data);

			var adventureData = {
				title: newAdventure.title,
				type: 'adventure',
				date: new Date().getTime()
			}, adventureNode, userInviteFollows, userInviteJoins, adventureOwner;

			adventureNode = db.createNode(adventureData);

			Step(
				function getInviteJoins(){
					if(newAdventure.requestJoin.length) {
						var group = this.group();
						for (var i=0, j=newAdventure.requestJoin.length; i<j; i++) {
							db.getNodeById( newAdventure.requestJoin[i], group() );
						}
					} else {
						return [];
					}
				},
				function storeInviteJoins(err, results){
					userInviteJoins = results;
					return 'now do follows';
				},
				function getInviteFollows(){
					if(newAdventure.requestFollow.length) {
						var group = this.group();
						for (var i=0, j=newAdventure.requestFollow.length; i<j; i++) {
							db.getNodeById( newAdventure.requestFollow[i], group() );
						}
					} else {
						return [];
					}
				},
				function storeInviteFollows(err, results){
					userInviteFollows = results;
					return 'now get owner';
				},
				function getOwner(){
					db.getNodeById( newAdventure.userid, this);
				},
				function storeOwner(err, result){
					adventureOwner = result;
					return 'save adventure';
				},
				function saveAdventure(){
					adventureNode.save(this);
				},
				function indexAdventure(){
					adventureNode.index('adventure', 'title', newAdventure.title, this.parallel() );
					adventureNode.index('fulltext', 'adventure', newAdventure.title, this.parallel() );
				},
				function relateAdventure(err){
					adventureNode.createRelationshipTo(ADVENTURES_REFERENCE, 'MEMBER_OF', {}, this.parallel() );
					adventureOwner.createRelationshipTo( adventureNode, 'CREATED', {}, this.parallel() );
				},
				function sendInviteJoins(err){
					var invite = adventureOwner._data.data.username + ' has invited you to join ' +
						adventureData.title;
					if(userInviteJoins.length) {
						var group = this.group();
						userInviteJoins.forEach(function(user){
							adventureNode.createRelationshipTo(user, 'INVITE', { type: 'MEMBER_OF', inviteText: invite }, group() );
						});
					}
				},
				function sendInviteFollows(){
					var invite = adventureOwner._data.data.username + ' has invited you to follow ' +
						adventureData.title;
					if(userInviteFollows.length) {
						var group = this.group();
						userInviteFollows.forEach(function(user){
							adventureNode.createRelationshipTo(user, 'INVITE', { type: 'FOLLOWS', inviteText: invite }, group() );
						});
					}
				},
				function sendResults(err){
					res.json({  status: "success", data: { adventureID: adventureNode.id } });
				}
			);
		}
	};

};

module.exports = Adventure;