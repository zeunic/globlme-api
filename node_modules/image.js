// var Image = require('./modules/image');
// var imageModule = new Image()

var CDN_URI;

var formidable = require('formidable'),
	validate = require('./../modules/validate');


module.exports = function(configOptions){
	var scopeSocket;
	var sizes = [ 80, 200, 320, 480, 640, 800, 1000 ];

	if(configOptions) {
		var io = configOptions.socketIO;
		io.sockets.on('connection', function(socket){
			scopeSocket = socket;
			scopeSocket.progressSent = 0;
			console.log('socket connected: ', socket.id);
			scopeSocket.emit('uploadConnect', 'socket connected');
		});
	}

	// local dependancies?
	var Cloudfiles = require('cloudfiles'),
		Easyimage = require('easyimage'),
		Step = require('step');

	var config = { auth: { username: 'zeunicllc', apiKey: 'e4e2973174da5aeb4e63fbdd51f39527' } };
	var cloudfilesClient = Cloudfiles.createClient(config);
	cloudfilesClient.setAuth(function(){
		cloudfilesClient.getContainer('globl.me', true, function(test, container){
			CDN_URI = container.cdnUri + '/';
		});
	});

	var thumbNailProcessComplete = function(err, results, callback) {
		console.log('thumbnails process complete');
		if(scopeSocket) {
			console.log('scope socket emit...');
			if(!err) {
				scopeSocket.emit('processComplete', { action: 'processing', value: 100 } );
			} else {
				scopeSocket.emit('processError', 'Error processing image thumbnails');
			}
		} else {
			console.log('no socket connected??');
		}
	};

	var imageCDNStoreComplete = function() {
		console.log('apparently images are on CDN');
		console.dir(arguments);
	};

	var _saveImageSizes = function(originalSource, callback){
		var originalSourcePath;

		if(typeof originalSource == 'string') {
			originalSourcePath = originalSource;
		} else {
			originalSourcePath = originalSource.path;
		}

		Step(
			function processAllSizes(){
				var group = this.group();
				sizes.forEach(function(size){
					Easyimage.resize({
						src: originalSourcePath,
						dst: originalSourcePath + '_' + size + '.jpg',
						width: size,
						height: size,
						quality: 80
					}, group() );
				});
			},
			function sendResults(err, imageResizedResults){
				console.log('done resizing, here are results');
				console.log(err);
				console.log(imageResizedResults);
				if(typeof originalSource == 'string') {
					console.log('got a string must be old function');
					callback(undefined,imageResizedResults);
				} else {
					imageResizedResults.push(originalSource);
					callback(undefined, imageResizedResults);
				}
			}
		);
	};

	var _storeImagesToCDN = function(images, remoteUserPath, callback){
		var imageUrls = [],
			imageArray;

		Step(
			function getImages(){
				var results = [];
				if(typeof images == 'string') {
					// gather images array
					for(var i=0, j=sizes.length; i<j; i++) {
						var image = { name: images + '_' + sizes[i] + '.jpg' }; // making an array with all the images in the temp folder based on the sizes
						results.push(image);
					}
					results.push({ name: images }); // this is the original, no extension
					imageArray = results;
				} else {
					// backwards compat pass old object through
					imageArray = images;
				}
				return 'undefined'; // lol? still...
			},
			function uploadImages(err, results){
				var group = this.group();
				imageArray.forEach(function(image){
					var fullPath = remoteUserPath + '/' + image.name;
					cloudfilesClient.setAuth(function(){
						// console.log('auth set...');
						cloudfilesClient.addFile(
							'globl.me', // will need to fix containers soon
							{ remote: fullPath, local: '_uploads/' + image.name },
							function(err, uploaded){
								if(err) { console.log("image upload error: ",err); }
								// console.log('addfile is done...');
								// console.log(err, uploaded);
						});
					});

					(group()(undefined,CDN_URI + fullPath));
				});
			},
			function sendResults(err, results) {
				// really, really need to fix the above code to be sync with actual upload progress
				callback(undefined,results);
			}
		);
	};

	return {
		convertImageToJpg: function(originalSourcePath, callback) {
				Easyimage.convert({
					src: originalSourcePath,
					dst: originalSourcePath +'.jpg',
					quality: 80
				}, callback);
		},
		cropSquare: function(imageInfo, offSetX, offSetY, callback){
			if(imageInfo.width > imageInfo.height) {
				imageInfo.width = imageInfo.height;
			} else if (imageInfo.height > imageInfo.width) {
				imageInfo.height = imageInfo.width;
			}

			Easyimage.thumbnail(
				{
					src: imageInfo.name, dst:originalSourcePath + '_square.jpg',
					width: imageInfo.width, height: imageInfo.height,
					x:offSetX, y:offSetY
				},
				function(err, stdout, stderr) {
					if (err) throw err;
					return callback(arguments);
				}
			);
		},
		saveImageSizes: _saveImageSizes,
		storeImagesToCDN: _storeImagesToCDN,
		acceptAsyncUpload: function(req, res, next) {
			console.log('upload starting!');

			var form = new formidable.IncomingForm();
			form.uploadDir = process.cwd() + '/_uploads/';

			var token;

			var rc = { data: false, auth: false };

			form.parse(req, function(err, fields, files){
				if(!err) {
					token = files.photo.path.split('/').pop();
					if (scopeSocket && scopeSocket.emit) {
						console.log('upload complete for socket!');
						scopeSocket.emit('uploadComplete', { action: 'uploading', value: token });
						scopeSocket.progressSent = 0;
						scopeSocket.emit('processingThumbs', { action: 'processing', value: 0 });
						console.log('upload complete for socket: ', scopeSocket.id);
					} else {
						console.log('need to tell the app now...and...then do something?');
						// res.json({ status: 'success', message: 'Upload Complete' });
					}
					_saveImageSizes(files.photo, thumbNailProcessComplete);
				} else {
					res.json({ status: 'error', message: 'there was an error uploading your file' });
				}
			});

			form.on('field', function(name, value){
				if (name == 'auth') {
					rc.auth = value;
				} else if (name == 'data') {
					rc.data = value;
				}

				if(rc.data && rc.auth) {
					var isAuthorized = validate.checkAuthorization(rc.data, rc.auth);

					if(!isAuthorized) {
						// end incoming file upload?
						console.log('derp: invalid auth');
						// req.end(); // might not work in express like i think
						// res.end('You shall not pass');
					}

				}
			});

			form.on('progress', function(bytesReceived, bytesExpected){
				var percent = parseFloat( (bytesReceived / bytesExpected).toPrecision(2) );

				if(scopeSocket) {
					if(percent > scopeSocket.progressSent + 0.03) {
						scopeSocket.emit('uploadProgress', { action: 'uploading', value: percent });
						scopeSocket.progressSent = percent;
					}
				}
			});

			form.on('end', function(){
				res.json({ action: 'uploading', status: 'success', value: token });
				console.log('file uploaded: ' + token);
			});
		}
	};
};