/*** Generated by streamline 0.2.5 - DO NOT EDIT ***/
var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename),__propagate=__rt.__propagate,__trap=__rt.__trap,__future=__rt.__future,__setEF=__rt.__setEF,__g=__rt.__g;
/*     1 */ (function() {
/*     2 */   var URL, constants, flatten, request, unflatten, __slice = [].slice;
/*     5 */   constants = require("constants");
/*     7 */   request = require("request");
/*     9 */   URL = require("url");
/*    11 */   exports.wrapRequestForAuth = function(url) {
/*    12 */     var auth, fixArgs, verb, wrapper, _fn, _i, _len, _ref;
/*    13 */     auth = URL.parse(url).auth;
/*    14 */     if (!auth) {
/*    15 */       return request;
                }
              ;
/*    17 */     fixArgs = function(args) {
/*    18 */       if ((typeof args[0] === "string")) {
/*    19 */         url = args[0];
                  }
/*    20 */        else {
/*    21 */         url = (args[0].url || args[0].uri);
                  }
                ;
/*    23 */       if (!url) {
/*    24 */         console.log("UH OH:");
/*    25 */         console.log(args);
                  }
                ;
/*    27 */       url = URL.parse(url);
/*    28 */       if (!url.auth) {
/*    29 */         url.host = ((("" + auth) + "@") + url.host);
                  }
                ;
/*    31 */       url = URL.format(url);
/*    32 */       if ((typeof args[0] === "string")) {
/*    33 */         args[0] = url;
                  }
/*    34 */        else {
/*    35 */         args[0].url = args[0].uri = url;
                  }
                ;
/*    37 */       return args;
                };
/*    39 */     wrapper = {
                };
/*    40 */     _ref = ["get","post","put","del","head",];
/*    41 */     _fn = function(verb) {
/*    42 */       return wrapper[verb] = function() {
/*    43 */         var args;
/*    44 */         args = ((1 <= arguments.length) ? __slice.call(arguments, 0) : []);
/*    45 */         return request[verb].apply(request, fixArgs(args));
                  };
                };
/*    48 */     for (_i = 0, _len = _ref.length; (_i < _len); _i++) {
/*    49 */       verb = _ref[_i];
/*    50 */       _fn(verb);
                };
/*    52 */     return wrapper;
              };
/*    55 */   exports.adjustError = function(error) {
/*    56 */     var serverError;
/*    57 */     if (error.statusCode) {
/*    58 */       serverError = (error.body || {
/*    59 */         message: "Unknown Neo4j error."
                  });
/*    61 */       if ((typeof serverError === "string")) {
/*    62 */         try {
/*    63 */           serverError = JSON.parse(serverError);
/*    64 */         } catch (_error) {
                    
                    };
                  }
                ;
/*    66 */       error = new Error;
/*    67 */       error.message = (serverError.message || serverError);
                }
              ;
/*    69 */     if ((typeof error !== "object")) {
/*    70 */       error = new Error(error);
                }
              ;
/*    72 */     if ((error.errno === constants.ECONNREFUSED)) {
/*    73 */       error.message = "Couldnâ€™t reach database (Connection refused)";
                }
              ;
/*    75 */     return error;
              };
/*    78 */   exports.serialize = function(o, separator) {
/*    79 */     return JSON.stringify(flatten(o, separator));
              };
/*    82 */   exports.deserialize = function(o, separator) {
/*    83 */     return unflatten(JSON.parse(o), separator);
              };
/*    86 */   flatten = function(o, separator, result, prefix) {
/*    87 */     var key, value, _i, _len, _ref;
/*    88 */     separator = (separator || ".");
/*    89 */     result = (result || {
                });
/*    90 */     prefix = (prefix || "");
/*    91 */     if ((typeof o !== "object")) {
/*    92 */       return o;
                }
              ;
/*    94 */     _ref = Object.keys(o);
/*    95 */     for (_i = 0, _len = _ref.length; (_i < _len); _i++) {
/*    96 */       key = _ref[_i];
/*    97 */       value = o[key];
/*    98 */       if ((typeof value !== "object")) {
/*    99 */         result[(prefix + key)] = value;
                  }
/*   100 */        else {
/*   101 */         flatten(value, separator, result, (key + separator));
                  }
                ;
                };
/*   104 */     return result;
              };
/*   107 */   unflatten = function(o, separator, result) {
/*   108 */     var currentKey, i, key, keys, lastKey, numKeys, separatorIndex, target, value, _i, _j, _len, _ref, _ref1;
/*   109 */     separator = (separator || ".");
/*   110 */     result = (result || {
                });
/*   111 */     if ((typeof o !== "object")) {
/*   112 */       return o;
                }
              ;
/*   114 */     _ref = Object.keys(o);
/*   115 */     for (_i = 0, _len = _ref.length; (_i < _len); _i++) {
/*   116 */       key = _ref[_i];
/*   117 */       value = o[key];
/*   118 */       separatorIndex = key.indexOf(separator);
/*   119 */       if ((separatorIndex === -1)) {
/*   120 */         result[key] = value;
                  }
/*   121 */        else {
/*   122 */         keys = key.split(separator);
/*   123 */         target = result;
/*   124 */         numKeys = keys.length;
/*   125 */         for (i = _j = 0, _ref1 = (numKeys - 2); ((0 <= _ref1) ? (_j <= _ref1) : (_j >= _ref1)); i = ((0 <= _ref1) ? ++_j : --_j)) {
/*   126 */           currentKey = keys[i];
/*   127 */           if ((target[currentKey] === void 0)) {
/*   128 */             target[currentKey] = {
                        };
                      }
                    ;
/*   130 */           target = target[currentKey];
                    };
/*   132 */         lastKey = keys[(numKeys - 1)];
/*   133 */         target[lastKey] = value;
                  }
                ;
                };
/*   136 */     return result;
              };
/*   139 */ }).call(this);
